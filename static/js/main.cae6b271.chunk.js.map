{"version":3,"sources":["components/Scoreboard.js","App.js","serviceWorker.js","index.js"],"names":["Scoreboard","_ref","size","react_default","a","createElement","className","console","log","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","document","addEventListener","e","setVelocity","setTimeout","moveChipmunk","showChipmunkHead","cell","chipmunk","state","chipmunkHead","row","col","showChipmunkBody","chipmunkBody","find","isbody","showAcorn","acorn","getRandomAcorn","newAcorn","Math","floor","random","handleClick","setState","velocity","x","y","points","length","gameOver","collidesWithAcorn","nextState","objectSpread","concat","toConsumableArray","pop","isOffEdge","_this$state","event","keyCode","_ref2","_ref3","_ref4","_ref5","grid","colRow","push","_this2","_this$state2","components_Scoreboard","onKeyPress","map","i","key","type","onClick","bind","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cae6b271.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Scoreboard = ({size}) =>{\r\n\r\n    return(\r\n        \r\n        <div className=\" container-flex mt-5 border \">\r\n            <p className=\"h1\">SCORE BOARD </p>\r\n          {console.log(size)}\r\n        </div>\r\n    )\r\n}\r\nexport default Scoreboard;\r\n","import React from 'react';\nimport './App.css';\nimport Scoreboard from './components/Scoreboard';\n\nclass App extends React.Component {\n \n    constructor(){\n    super();\n    const grid = [];\n\n    //create grid\n\n    for(let row=0;row<16;row++){\n        const colRow=[];\n        for(let col=0;col<16;col++){\n            colRow.push({\n                row,col\n            });\n        }\n        grid.push(colRow);\n    }\n\n    //creando estado \n\n    this.state ={\n        grid,\n        acorn:{\n            row:Math.floor(Math.random()*16),\n            col:Math.floor(Math.random()*16),\n        },\n        chipmunk:{\n          chipmunkHead:{\n            row:8,\n            col:8\n          },\n          chipmunkBody:[0,1],\n          velocity :{\n              x:1,\n              y:0\n          },\n          points:[0]\n  \n        },\n       \n    }\n}\n\n    \n    //evento para mover a la ardilla cada segundo\n\n    componentDidMount = () => {\n        document.addEventListener('keydown',(e)=> {\n            this.setVelocity(e);\n        });\n        setTimeout(()=>{\n            this.moveChipmunk()\n        },500)\n    }\n \n    \n    //creando el cuerpo de la ardilla\n\n    showChipmunkHead = (cell) => {\n        const {chipmunk}=this.state;\n        return(chipmunk.chipmunkHead.row === cell.row && chipmunk.chipmunkHead.col === cell.col );\n      } \n\n    showChipmunkBody = (cell) =>{\n        const {chipmunk}=this.state;\n        return chipmunk.chipmunkBody.find(isbody=>isbody.row === cell.row && isbody.col === cell.col );\n    }\n\n    //mostrar acorn\n\n    showAcorn = (cell) =>{\n\n      const {acorn}=this.state;\n      return (acorn.row === cell.row && acorn.col === cell.col);\n    }\n\n    //obtener aleatoriamente las bellotas\n    getRandomAcorn = () =>{\n        const {chipmunk}=this.state;\n        const newAcorn = {\n            row: Math.floor(Math.random() * 15),\n            col: Math.floor(Math.random() * 15),\n        }\n        if (this.showChipmunkBody(newAcorn) || (\n            chipmunk.chipmunkHead.row === newAcorn.row\n            && chipmunk.chipmunkHead.col === newAcorn.col)) {\n            return this.getRandomAcorn();\n          } else {\n            return newAcorn;\n          }\n\n    }\n\n    handleClick = () =>{\n      const {chipmunk}=this.state;\n       this.setState({\n          chipmunk:{\n            chipmunkHead:{\n              row:1,\n              col:1\n            },\n            chipmunkBody:[{row:1,col:3},{row:1,col:2}],\n            velocity :{\n                x:1,\n                y:0\n            },\n            points:[chipmunk.chipmunkBody.length-2]\n          \n          },\n          acorn:{\n              row:Math.floor(Math.random()*16),\n              col:Math.floor(Math.random()*16),\n          },\n          gameOver:false,\n          }\n         \n      )\n\n      setTimeout(() => {\n        this.moveChipmunk()\n      },500)\n    }\n\n\n    //creando funciÃ³n que mueve  a la ardilla\n  moveChipmunk = () =>{\n    if(this.state.gameOver)return;\n   \n    this.setState(({chipmunk,acorn})=>{\n    const collidesWithAcorn=this.collidesWithAcorn();\n    const nextState = {\n     chipmunk:{\n       ...chipmunk,\n       chipmunkHead:{\n        row:chipmunk.chipmunkHead.row + chipmunk.velocity.y,\n        col: chipmunk.chipmunkHead.col + chipmunk.velocity.x\n       },\n       chipmunkBody:[chipmunk.chipmunkHead, ...chipmunk.chipmunkBody],\n       }, \n       acorn:collidesWithAcorn? this.getRandomAcorn():acorn\n     };\n     \n    if(!collidesWithAcorn) nextState.chipmunk.chipmunkBody.pop();\n    return nextState;\n   },() => {\n     if(this.isOffEdge()){\n       this.setState({\n        gameOver:true,\n       })\n       return;\n     }\n     setTimeout(() => {\n      this.moveChipmunk()\n    },500)\n  });\n}\ncollidesWithAcorn = () => {\n    const {acorn,chipmunk} = this.state;\n    return acorn.row === chipmunk.chipmunkHead.row \n      && acorn.col === chipmunk.chipmunkHead.col \n  }\n  \n  isOffEdge = () => {\n      const {chipmunk} = this.state\n      if(chipmunk.chipmunkHead.col>16\n        ||chipmunk.chipmunkHead.col<0\n        ||chipmunk.chipmunkHead.row>16\n        ||chipmunk.chipmunkHead.row<0)\n      return true;  \n    }\n  \n  \n    setVelocity = (event) => {\n\n        if(event.keyCode===40)\n        { \n          this.setState(({chipmunk})=>({\n          chipmunk:{\n            ...chipmunk,\n            velocity:{\n              x:0,\n              y:-1\n            }\n          }\n        }))\n    }else if(event.keyCode===38)\n        {\n      this.setState(({chipmunk})=>({\n        chipmunk:{\n          ...chipmunk,\n          velocity:{\n            x:0,\n            y:1\n          }\n        }\n      }))\n    \n    }else if (event.keyCode===37)\n    {\n      this.setState(({chipmunk})=>({\n        chipmunk:{\n          ...chipmunk,\n          velocity:{\n            x:1,\n            y:0\n          }\n        }\n      }))\n    \n    }else if (event.keyCode===39)\n    {\n      this.setState(({chipmunk})=>({\n        chipmunk:{\n          ...chipmunk,\n          velocity:{\n            x:-1,\n            y:0\n          }\n        }\n      }))\n          } \n        }\n\n     \n    render(){\n        const {grid,gameOver,chipmunk}=this.state\n     \n        return(\n        <div className=\"App\">\n         <div className=\"container-fluid\">\n           {\n             <div className=\"row\">\n                <div className=\"col-4\">\n                  <Scoreboard size={chipmunk.points}/>\n                </div>\n                <div className=\"col-6\">\n                 <div onKeyPress={this.setVelocity} className=\"grid\" >\n                  {\n                      grid.map((row,i)=>\n                      row.map(cell => (\n                          <div key={`${cell.row} ${cell.col}`}className={`cell \n                          ${\n                              this.showChipmunkHead(cell)\n                            ? 'head': this.showAcorn(cell)\n                            ? 'acorn':this.showChipmunkBody(cell)\n                            ? 'bodyChipmunk':''\n                            }`\n                        } >\n                        </div>\n                      ))\n                    )\n                  }\n                  </div>       \n              </div>\n              <div className=\"col-2 mt-5\">\n                  {(gameOver)\n                    ? \n                    <div>\n                    <button type = 'button' className=\"buttonSize\" onClick={this.handleClick.bind(this)}>\n                      <i className=\"fas fa-sync\"></i>\n                    </button>\n                    <p>volver a jugar</p>\n                 </div>\n                    :''} \n                </div>    \n            </div>\n           }\n          </div>\n        </div>\n        )\n    }\n  \n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}